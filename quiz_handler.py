import os
import requests
import asyncio
import urllib.parse
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command
from questions import animal_info, animals, questions

router = Router()

IMAGE_FOLDER = "images"

# –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É images
if not os.path.exists(IMAGE_FOLDER):
    os.makedirs(IMAGE_FOLDER)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def download_image(url, save_path):
    try:
        response = requests.get(url)
        response.raise_for_status()  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É—Å–ø–µ—à–Ω—ã–π, –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        with open(save_path, 'wb') as f:
            f.write(response.content)
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {save_path}")
    except requests.exceptions.RequestException:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URL: {url}")


def get_animal_image(animal_name):
    image_path = os.path.join(IMAGE_FOLDER, f"{animal_name.replace(' ', '_').lower()}.png")
    try:
        if not os.path.exists(image_path):
            image_url = animal_info[animal_name]["image_url"]
            download_image(image_url, image_path)
    except KeyError:
        print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ {animal_name}")
    return image_path


user_data = {}
question_idx = 0
user_scores = {animal: 0 for animal in animal_info}

user_feedback = {}
waiting_for_feedback = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def send_animal_image(message: Message, animal_name: str):
    try:
        image_path = get_animal_image(animal_name)

        if not os.path.exists(image_path):
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        image = FSInputFile(image_path)
        await message.answer_photo(image)
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
async def ask_question(message: Message, idx: int):
    global question_idx
    try:
        question = questions[idx]
        buttons = [KeyboardButton(text=answer) for answer in question["answers"]]
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[buttons])

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É
        await message.answer("–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.", reply_markup=None)
        await message.answer(question["question"], reply_markup=markup)
    except KeyError:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.")


@router.message(Command("start"))
async def command_start_handler(message: Message):
    try:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        button = KeyboardButton(text="–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
        markup.add(button)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ? –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                             reply_markup=markup)
        await message.answer(
            "–ë–æ—Ç –∑–∞–¥–∞—Å—Ç –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –ø–æ–º–æ—â—å –±—É–¥—É—Ç –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.")
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")


@router.message(Command("quiz"))
async def start_quiz(message: Message):
    global question_idx, user_data, user_scores
    try:
        user_data = {}
        user_scores = {key: 0 for key in user_scores}
        question_idx = 0
        await message.answer(
            "–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.")
        await ask_question(message, question_idx)
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")


@router.message()
async def process_answer(message: Message):
    global question_idx, user_scores

    try:
        user_answer = message.text
        current_question = questions[question_idx]

        if user_answer in current_question["answers"]:
            answer_idx = current_question["answers"].index(user_answer)
            animal = animals[answer_idx]
            user_scores[animal] += 1

        question_idx += 1

        if question_idx < len(questions):
            await ask_question(message, question_idx)
        else:
            most_likely_animal = max(user_scores, key=user_scores.get)

            # –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            animal_description = animal_info[most_likely_animal]["description"]
            await message.answer(f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {most_likely_animal} ü¶Ñ")
            await message.answer(animal_description)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await send_animal_image(message, most_likely_animal)

            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å {user_scores[most_likely_animal]} –±–∞–ª–ª–æ–≤!")
            markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞")],
            ])
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=markup)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ–∫–µ

            await message.answer(
                "–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –æ —Å–≤–æ–µ–º —Ç–æ—Ç–µ–º–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ "
                "–ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. "
                "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —É—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∏ –∑–∞—â–∏—Ç–∏—Ç—å –∏—Ö –ø–æ–ø—É–ª—è—Ü–∏–∏. "
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://moscowzoo.ru/about/guardianship"
            )

            share_message = f"–ú–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {most_likely_animal} ü¶Ñ\n"
            share_message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {user_scores[most_likely_animal]} –±–∞–ª–ª–æ–≤\n"
            share_message += "–ü—Ä–æ–π–¥–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ! üëá\n"
            share_message += "https://t.me/ZOO_Bot"

            encoded_message = urllib.parse.quote(share_message)
            vk_share_url = f"https://vk.com/share.php?title={encoded_message}"
            tg_share_url = f"https://t.me/share/url?url={encoded_message}"
            wa_share_url = f"https://wa.me/?text={encoded_message}"

            inline_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK", url=vk_share_url)],
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", url=tg_share_url)],
                [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp", url=wa_share_url)]
            ])
            await message.answer(
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –¥—Ä—É–∑—å—è–º–∏! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å.",
                reply_markup=inline_markup)

            question_idx = 0
            user_scores = {key: 0 for key in user_scores}
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –æ—Ç–∑—ã–≤–∞
@router.message(lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def handle_feedback_request(message: Message):
    user_id = message.from_user.id
    try:
        waiting_for_feedback[user_id] = True
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ.")
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
@router.message(lambda message: waiting_for_feedback.get(message.from_user.id, False))
async def collect_feedback(message: Message):
    user_id = message.from_user.id
    try:
        user_feedback[user_id] = message.text
        waiting_for_feedback[user_id] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –±–æ—Ç.")
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")