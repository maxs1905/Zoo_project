import os
import requests
from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.filters import Command
from questions import animal_info, animals, questions

router = Router()

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_FOLDER = "images"

# –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É images
if not os.path.exists(IMAGE_FOLDER):
    os.makedirs(IMAGE_FOLDER)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def download_image(url, save_path):
    try:
        response = requests.get(url)
        response.raise_for_status()
        with open(save_path, 'wb') as f:
            f.write(response.content)
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {save_path}")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
def get_animal_image(animal_name):
    image_path = os.path.join(IMAGE_FOLDER, f"{animal_name.replace(' ', '_').lower()}.png")
    if not os.path.exists(image_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–∞—á–∞–Ω–æ –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = animal_info[animal_name]["image_url"]
        download_image(image_url, image_path)
    return image_path

user_data = {}
question_idx = 0
user_scores = {animal: 0 for animal in animal_info}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_feedback = {}
# –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
waiting_for_feedback = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message: Message, idx: int):
    global question_idx
    question = questions[idx]
    buttons = [KeyboardButton(text=answer) for answer in question["answers"]]
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[buttons])
    await message.answer(question["question"], reply_markup=markup)

@router.message(Command("start"))
async def command_start_handler(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[])
    button = KeyboardButton(text="–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    markup.add(button)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ? –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'", reply_markup=markup)

@router.message(Command("quiz"))
async def start_quiz(message: Message):
    global question_idx, user_data, user_scores
    user_data = {}
    user_scores = {key: 0 for key in user_scores}
    question_idx = 0
    await ask_question(message, question_idx)

@router.message()
async def process_answer(message: Message):
    global question_idx, user_scores

    if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" or (message.from_user.id in waiting_for_feedback and waiting_for_feedback[message.from_user.id]):
        return
    user_answer = message.text
    current_question = questions[question_idx]

    if user_answer in current_question["answers"]:
        answer_idx = current_question["answers"].index(user_answer)
        animal = animals[answer_idx]
        user_scores[animal] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    question_idx += 1

    if question_idx < len(questions):
        await ask_question(message, question_idx)
    else:
        most_likely_animal = max(user_scores, key=user_scores.get)

        #–æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        animal_description = animal_info[most_likely_animal]["description"]
        animal_image_path = get_animal_image(most_likely_animal)
        await message.answer(f"–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {most_likely_animal} ü¶Ñ")
        await message.answer(animal_description)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if os.path.exists(animal_image_path):
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {most_likely_animal} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º...")

            try:
                with open(animal_image_path, 'rb') as image_file:
                    image = InputFile(image_file, filename=f"{most_likely_animal}.png")
                    await message.answer_photo(image)
            except Exception as e:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        else:
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å {user_scores[most_likely_animal]} –±–∞–ª–ª–æ–≤!")

        #–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞")],
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
        ])
        await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞?", reply_markup=markup)

        #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
        await message.answer(
            "–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –æ —Å–≤–æ–µ–º —Ç–æ—Ç–µ–º–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ "
            "–ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞. "
            "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —É—Ö–æ–¥ –∑–∞ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∏ –∑–∞—â–∏—Ç–∏—Ç—å –∏—Ö –ø–æ–ø—É–ª—è—Ü–∏–∏. "
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://moscowzoo.ru/about/guardianship"
        )

        question_idx = 0
        user_scores = {key: 0 for key in user_scores}

    # "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    @router.message()
    async def handle_feedback(message: Message):
        user_id = message.from_user.id
        if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
            waiting_for_feedback[user_id] = True
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!")

        elif user_id in waiting_for_feedback and waiting_for_feedback[user_id]:
            user_feedback[user_id] = message.text
            waiting_for_feedback[user_id] = False
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.")
            markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞")]
            ])
            await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–æ–≤–∞?", reply_markup=markup)